===============================================================================
=    W e l c o m e   t o   t h e   i 3 w m    T u t o r    -    Version 1.0   =
===============================================================================

i3 is a tiling window manager, completely written from scratch. The target 
platforms are GNU/Linux and BSD operating systems, our code is Free and Open 
Source Software (FOSS) under the BSD license. i3 is primarily targeted at 
advanced users and developers.

Inspired by vimtutor, this tutor is written by Paul Sajna based on the i3 user 
guide by Michael Stapelberg. If you find something missing from the tutor 
please file a github issue at https://github.com/sajattack/i3tutor/issues.
If you have difficulty with i3 unrelated to this tutor you can ask for help
at https://www.reddit.com/r/i3wm, contact us on irc (preferred) or post your
question(s) on the mailing list.

It is important to remember that this tutor is set up to teach by use. That 
means that you need to execute the commands to learn them properly.  If you 
only read the text, you will forget the commands!

This tutor will teach the default keybindings of i3, but it will also teach
you how to modify these keybindings by editing the configuration file. i3 is 
all about customization. It is very powerful.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Lesson 1.1 Opening terminals and moving around
                

Throughout this tutor, the keyword $mod will be used to refer to the configured
modifier. This is the Alt key (Mod1) by default, with the Windows key (Mod4) 
being a popular alternative. i3-config-wizard should've asked you which 
modifier to use when i3 first opened and generated your config file.

This tutor opened the terminal you are reading this in. To open another one
yourself, press $mod+Enter. i3 will place it next to the current one, splitting
the screen size in half. Depending on your monitor, i3 will put the created 
window beside the existing window (on wide displays) or below the existing
window (rotated displays).

To move focus between the two terminals you can use the direction keys which
you may know from the editor vi. However, in i3, your homerow is used for these
keys (in vi, the keys are shifted to the left by one for compatibility with
most keyboard layouts). Therefore, $mod+j is left, $mod+k is down, $mod+l is up
and mod+; is right. So to switch back to the tutor, use $mod+j. Of course you
can also use the arrow keys.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      Lesson 1.2 - Splits and containers
                      

At the moment, your workspace is split (it contains two terminals) in a 
specific direction (horizontal by default). Every window can be split 
horizontally or vertically again, just like the workspace. The terminology is
"window" for a container that actually contains an X11 window (like a terminal
or browser) and "split container" for containers that consist of one or more
windows. 

To split a window vertically, press $mod+v before you create the new window.
To split it horizontally, press $mod+h. Let's split our two terminals into
four. From the tutor, press $mod+v, then $mod+enter, then move to the right
with $mod+; and do the same. Excellent. Don't forget to switch back to the
tutor with $mod+j

A split container can have one of three layouts, split, stacking, or tabbed.
Split windows are sized so that every window gets an equal amount of space in
the container. In the next lesson we'll go over stacking and tabbed layouts.
For now just remember that $mod+v splits vertically and $mod+h splits 
horizontally.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    Lesson 1.3 Stacking and tabbed layouts
                

With a stacking layout, only the focused window is displayed. You get a list of
windows at the top of the container.

In a tabbed layout, the window list is only a single line which is vertically
split, just like in your favourite web browser.

Let's try it out. From the tutor, press $mod+s to switch from a split layout
to a stacking layout. You should see the terminal to the right disappear.
But don't worry, it's not really gone. You can still see the title of the 
window below the title of the tutor window. To bring it back up, press $mod+k,
then return to the tutor with $mod+l.

Now let's turn the bottom two terminals into a tabbed layout. From the tutor,
press $mod+k twice to select the leftmost terminal and then $mod+w for tabbed
mode.

$mod+e is used to switch back to split layout. See if you can bring back our
4 terminal split layout on your own.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                       Lesson 1.4 Miscellaneous keybinds
                        

To make a window fullscreen or to leave fullscreen, press $mod+f. Go ahead and
try this now.

To open applications outside of a terminal, you can use the dmenu application
launcher by pressing $mod+d. Just begin typing the name of the application 
and press enter once the application you want to open is first in the list. 
The application has to be in your $PATH for this to work.

If an application does not have it's own mechanism for closing (such as a
menu, the escape key, or a shortcut like Control+w), you can press 
$mod+Shift+q to kill a window. For applications supporting the WM_DELETE 
protocol, this will correctly close the application (saving modifications or
doing other cleanup). If the application does not support the WM_DELETE 
protocol, your X server will kill the window and behaviour will depend on the
application.

To restart i3 in place (and thus get into a clean state if there is a bug, or
to upgrade to a newer version of i3) you can use $mod+Shift+r.

To cleanly exit i3 without killing your X server, you can use $mod+Shift+e.
By default, a dialog will ask you to confirm if you really want to quit.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//most of the following is all copied straight from the user guide
                          Lesson 1.5 Using workspaces
                          

Workspaces are an easy way to group a set of windows. By default, you are on 
the first workspace, as the bar on the bottom left indicates. To switch to 
another workspace, press $mod+num where num is the number of the workspace 
you want to use. If the workspace does not exist yet, it will be created.

A common paradigm is to put the web browser on one workspace, communication
applications (mutt, irssi, …) on another one, and the ones with which you work,
on the third one. Of course, there is no need to follow this approach.

If you have multiple screens, a workspace will be created on each screen at 
startup. If you open a new workspace, it will be bound to the screen you 
created it on. When you switch to a workspace on another screen, i3 will set 
focus to that screen.

To move a window to another workspace, simply press $mod+Shift+num where num
is (like when switching workspaces) the number of the target workspace. 
Similarly to switching workspaces, the target workspace will be created if it 
does not yet exist.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                Lesson 2 Tree


(This section is a lot of theoretical crap, not sure if it's worth including
in a practical tutorial)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            Lesson 3 Configuring i3


This is where the real fun begins ;-). Most things are very dependent on your 
ideal working environment so we can’t make reasonable defaults for them.

While not using a programming language for the configuration, i3 stays quite 
flexible in regards to the things you usually want your window manager to do.

For example, you can configure bindings to jump to specific windows, you can set
specific applications to start on specific workspaces, you can automatically 
start applications, you can change the colors of i3, and you can bind your keys 
to do useful things.

To change the configuration of i3, copy /etc/i3/config to ~/.i3/config (or
~/.config/i3/config if you like the XDG directory scheme) and edit it with a 
text editor.

This tutor has it's own config file, located at $install_dir/i3tutor.config,
so you can experiment with the tutor without breaking an existing i3 install.
When you are satisfied with your config, you can apply it to an installed i3
by copying the config file to ~/.i3/config or ~/.config/i3/config depending on
your system.

On first start (and on all following starts, unless you have a configuration 
file), i3 will offer you to create a configuration file. You can tell the 
wizard to use either Alt (Mod1) or Windows (Mod4) as modifier in the config 
file. Also, the created config file will use the key symbols of your current 
keyboard layout. To start the wizard, use the command i3-config-wizard. Please 
note that you must not have ~/.i3/config, otherwise the wizard will exit.

Since i3 4.0, a new configuration format is used. i3 will try to automatically 
detect the format version of a config file based on a few different keywords, 
but if you want to make sure that your config is read with the new format, 
include the following line in your config file:
# i3 config file (v4)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Lesson 3.1 Comments and fonts
                        

It is possible and recommended to use comments in your configuration file to 
properly document your setup for later reference. Comments are started with a # 
and can only be used at the beginning of a line:

Examples:
# This is a comment

i3 has support for both X core fonts and FreeType fonts (through Pango) to 
render window titles.

To generate an X core font description, you can use xfontsel(1). To see special
characters (Unicode), you need to use a font which supports the ISO-10646 
encoding.

A FreeType font description is composed by a font family, a style, a weight, a
variant, a stretch and a size. FreeType fonts support right-to-left rendering
and contain often more Unicode glyphs than X core fonts.

If i3 cannot open the configured font, it will output an error in the logfile 
and fall back to a working font.

Syntax:
font <X core font description>
font pango:<family list> [<style options>] <size>
                                                 
Examples:                                     
font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
font pango:DejaVu Sans Mono 10
font pango:DejaVu Sans Mono, Terminus Bold Semi-Condensed 11
font pango:Terminus 11px
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            3.2 Keyboard bindings


A keyboard binding makes i3 execute a command (see below) upon pressing a 
specific key. i3 allows you to bind either on keycodes or on keysyms (you can
also mix your bindings, though i3 will not protect you from overlapping ones).

A keysym (key symbol) is a description for a specific symbol, like "a" or "b",
but also more strange ones like "underscore" instead of "_". These are the ones 
you use in Xmodmap to remap your keys. To get the current mapping of your keys, 
use xmodmap -pke. To interactively enter a key and see what keysym it is 
configured to, use xev.

Keycodes do not need to have a symbol assigned (handy for custom vendor hotkeys 
on some notebooks) and they will not change their meaning as you switch to a 
different keyboard layout (when using xmodmap).

My recommendation is: If you often switch keyboard layouts but you want to keep 
your bindings in the same physical location on the keyboard, use keycodes. If 
you don’t switch layouts, and want a clean and simple config file, use keysyms.

Some tools (such as import or xdotool) might be unable to run upon a KeyPress 
event, because the keyboard/pointer is still grabbed. For these situations, the
--release flag can be used, which will execute the command after the keys have 
been released.

Syntax:

bindsym [--release] [<Group>+][<Modifiers>+]<keysym> command
bindcode [--release] [<Group>+][<Modifiers>+]<keycode> command

Examples:

# Fullscreen
bindsym $mod+f fullscreen toggle

# Restart
bindsym $mod+Shift+r restart

# Remap movement keys to vi-style
set $up k
set $down j
set $left h
set $right l

bindsym Mod1+$left focus left
bindsym Mod1+$down focus down
bindsym Mod1+$up focus up
bindsym Mod1+$right focus right

# Pulse Audio controls
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume 0 +5% 
bindsym XF86AudioLowerVolume exec pactl set-sink-volume 0 -5% 
bindsym XF86AudioMute exec pactl set-sink-mute 0 toggle

# Screen Brightness
bindsym XF86MonBrightnessUp exec xbacklight -inc 5 
bindsym XF86MonBrightnessDown exec xbacklight -dec 5

Available Modifiers:

Mod1-Mod5, Shift, Control
    Standard modifiers, see xmodmap(1)

Group1, Group2, Group3, Group4
    When using multiple keyboard layouts (e.g. with setxkbmap -layout us,ru), 
you can specify in which XKB group (also called “layout”) a keybinding should be 
active. By default, keybindings are translated in Group1 and are active in all 
groups. If you want to override keybindings in one of your layouts, specify the 
corresponding group. For backwards compatibility, the group “Mode_switch” is an 
alias for Group2.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              3.3 Mouse Bindings


A mouse binding makes i3 execute a command upon pressing a specific mouse button
in the scope of the clicked container (see [command_criteria]). You can 
configure mouse bindings in a similar way to key bindings.

Syntax:

bindsym [--release] [--border] [--whole-window] [--exclude-titlebar] [<Modifiers>+]button<n> command

By default, the binding will only run when you click on the titlebar of the 
window. If the --release flag is given, it will run when the mouse button is 
released.

If the --whole-window flag is given, the binding will also run when any part of 
the window is clicked, with the exception of the border. To have a bind run when
the border is clicked, specify the --border flag.

If the --exclude-titlebar flag is given, the titlebar will not be considered for
the keybinding.

Examples:

# The middle button over a titlebar kills the window
bindsym --release button2 kill

# The middle button and a modifer over any part of the window kills the window
bindsym --whole-window $mod+button2 kill

# The side buttons move the window around
bindsym button9 move left
bindsym button8 move right
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               3.4 Binding Modes
                               
You can have multiple sets of bindings by using different binding modes. When 
you switch to another binding mode, all bindings from the current mode are 
released and only the bindings defined in the new mode are valid for as long as 
you stay in that binding mode. The only predefined binding mode is default, 
which is the mode i3 starts out with and to which all bindings not defined in a 
specific binding mode belong.

Working with binding modes consists of two parts: defining a binding mode and 
switching to it. For these purposes, there are one config directive and one 
command, both of which are called mode. The directive is used to define the 
bindings belonging to a certain binding mode, while the command will switch to 
the specified mode.

It is recommended to use binding modes in combination with [variables] in order 
to make maintenance easier. Below is an example of how to use a binding mode.

Note that it is advisable to define bindings for switching back to the default 
mode.

Note that it is possible to use [pango_markup] for binding modes, but you need 
to enable it explicitly by passing the --pango_markup flag to the mode 
definition.

Syntax:

# config directive
mode [--pango_markup] <name>

# command
mode <name>

Example:

# Press $mod+o followed by either f, t, Escape or Return to launch firefox,
# thunderbird or return to the default mode, respectively.
set $mode_launcher Launch: [f]irefox [t]hunderbird
bindsym $mod+o mode "$mode_launcher"

mode "$mode_launcher" {
    bindsym f exec firefox
    bindsym t exec thunderbird

    bindsym Escape mode "default"
    bindsym Return mode "default"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
